BORN2BEROOT EVALUATION NOTES

Link to Evaluation Document
https://github.com/wshloic/born2beroot_correction/blob/master/correction_born2beroot.pdf

What is a virtual machine?

A VM is a full system running in a virtual environemt. It uses software instead of a physical computer
to run programs etc. Part of the memory and processing power of the "Host" computer that the VM is 
running on is allocated for use by the VM. VMs can run basically any OS, regardless of the OS of the "Host"
system.

What is the purpose of a VM?

A VM allows a number of useful activities, including creating a safe test environments for developing software,
running multiple different operating environments on a single machine, creating multiple server instances on a
single machine, and much more. They allow a high degree of flexibility without needed to posess the equipment to run
all of these things physically.

How does a VM work?

A VM used virtualization to simulate the physical properties of a system (memory, processor, memory-width. etc). This
allows for a new "sub" system to be installed on the physical system. From the perspective of the VM, there is no difference
between itself and a physically intalled system in terms of functionality.

What is the difference between Debian and CentOS?

Both are distributions of linux, that is to say they are operating systems based on the linux kernal. This means that 
the vast majority of their workings and components are nearly identical. However, the main differences are as follows:

CentOS
- Very stable, with updates coming out in fairly long intervals. This is a benefit for use in servers as the priority
is less on keeping up with brand new features, but on stability and reliability. As well, CentOS versions have a very
long maintenance period (about 10 years), so they can run reliably for a very long time.
- It is difficult to upgrade between major versions of CentOS.
- Does not have a very good GUI, making it difficuly to use without knowledge of command line interfacing.
- Does not support many different system architectures.
- Better for enterprise or server deployments.

Debian:
- Rapid development and quick releases make debian more able to support the newest standards and technologies. Howver
this means it is difficult to maintain large systems deployed on debian.
- It is very easy to upgrade between major versions of Debian.
- Has a good desktop atmopshere and GUI, allowing it to more easily be run without the use of command line.
- Has many packages available and is more customizeable in respect to system architecture.
- Better for individual systems and development with current technologies.

Aptitude vs. Apt (Advanced Packaging Tool)?

Aptitude and Apt are both package managers. The main difference is the Aptitude is higher level, meaning is can be used
with a GUI, and is able to support management of dependancies more easily. Apt is lightweight and powerful, but requires
more knowledge of base systems and linux architecture. Aptitude can be said to have a higher level of abstraction, and
allows for the use of a number of useful functionalities that are not default in apt, including searching for packages
from a list, and scheduling automated package actions.

What is APPArmor?

APPArmor is a linux kernel security module that allows the controlling of access at a per-program level. This means that
access to all types of system resources can be managed safely to prevent security vulnerabilites from being exposed. This
is done using per-program profiles that are specified using a file-path. Profiles can allow capabilities like network 
access, raw socket access, and the permission to read, write, or execute files on matching paths.

Need to allow port 80 and port 21 before bonus section


IMPORTANT COMMANDS:

Unpack signature on macOS
- shasum *.vdi

Create a user for evaluator and add to sudo
- sudo useradd #name
- sudo useradd -G user42,sudo #name

OR

- sudo adduser

Add a new group
- sudo groupadd #newgroup

Add a user to a group
- sudo usermod -a -G #groupname #username

Check the groups of a Users
- id username
- groups

Check UFW status/modify ufw
- sudo ufw status
- sudo ufw allow #portnumber
- sudo ufw delete #rulenumber

Check SSH status (or any other service)
- sudo service ssh status

Check the Operating system
- uname -A

Get a list of users
- This is easily found by looking in /etc/passwd
- Can use "getent" command to display in terminal as well

Check Password Policy
- sudo nano /etc/pam.d/common-password

Check hostname
- hostname

Change hostname
- sudo nano /etc/hostname
- sudo nano /etc/hosts

View Partitions
- lsblk

Check SUDO and edit sudo
-sudo visudo /etc/sudoers



/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\
| You have to create a new user here.        |
| $ sudo adduser username                    | <- creating new user (yes (no))
| $ sudo chage -l username                   | <- Verify password expire info for new user
| $ sudo adduser username sudo               |
| $ sudo adduser username user42             | <- assign new user to sudo and user42 groups
\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/


                                           ##################################
                                           #    Part two: What to check?    #
                                           ##################################
|***************************************|
| 1) lsblk                              1 <- Check partitions
| 2) sudo aa-status                     2 <- AppArmor status
| 3) getent group sudo                  3 <- sudo group users
| 4) getent group user42                4 <- user42 group users
| 5) sudo service ssh status            5 <- ssh status, yep
| 6) sudo ufw status                    6 <- ufw status
| 7) ssh username@ipadress -p 4242      7 <- connect to VM from your host (physical) machine via SSH
| 8) nano /etc/sudoers.d/<filename>     8 <- yes, sudo config file. You can $ ls /etc/sudoers.d first
| 9) nano /etc/login.defs               9 <- password expire policy
| 10) nano /etc/pam.d/common-password  10 <- password policy
| 11) sudo crontab -l 

I think this one need an addition to make it more easy to pass evaluation. So, here we are on our checklist and his commands.

How to change hostname?
[$sudo nano /etc/hostname]

Where is sudo logs in /var/log/sudo?
[$cd /var/log/sudo/00/00 && ls]
You will see a lot of directories with names like 01 2B 9S 4D etc. They contain the logs we need.
[$ sudo apt update]
[$ ls]
Now you see that we have a new directory here.
[$ cd <nameofnewdirectory> && ls]
[$ cat log] <- Input log
[$ cat ttyout] <- Output log

How to add and remove port 8080 in UFW?
[$ sudo ufw allow 8080] <- allow
[$ sudo ufw status] <- check
[$ sudo ufw deny 8080] <- deny (yes yes)

How to run script every 30 seconds?
[$ sudo crontab -e]
Remove or commit previous cron "schedule" and add next lines in crontab file
|*************************************************|
| */1 * * * * /path/to/monitoring.sh              |
| */1 * * * * sleep 30s && /path/to/monitoring.sh |
|*************************************************|
To stop script running on boot you just need to remove or commit
|********************************|
| @reboot /path/to/monitoring.sh |
|********************************|
line in crontab file.

Temporarily fix /var/log/sudo access problem

sudo chown -R [username] /var/log/sudo


Kdump information
https://superuser.com/questions/280767/how-can-i-enable-kernel-crash-dumps-in-debian
